package rom.roni.blue;

import java.io.*;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.obex.*;

public class ObexPutClient {
    
    public static final byte[] JOSE_ENROLL = {(byte)0x4d,(byte)0x52,(byte)0x00,(byte)0x20,(byte)0x32,(byte)0x30,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x7a,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xfc,(byte)0x01,(byte)0x44,(byte)0x00,(byte)0xc5,(byte)0x00,(byte)0xc5,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x50,(byte)0x17,(byte)0x40,(byte)0x5e,(byte)0x00,(byte)0x3e,(byte)0x73,(byte)0x5d,(byte)0x40,(byte)0x2a,(byte)0x00,(byte)0x44,(byte)0x0f,(byte)0x5d,(byte)0x40,(byte)0x98,(byte)0x00,(byte)0x49,(byte)0x58,(byte)0x5d,(byte)0x40,(byte)0xd5,(byte)0x00,(byte)0x4f,(byte)0x47,(byte)0x5d,(byte)0x40,(byte)0x3e,(byte)0x00,(byte)0x61,(byte)0x18,(byte)0x5d,(byte)0x40,(byte)0xc2,(byte)0x00,(byte)0x72,(byte)0x44,(byte)0x5d,(byte)0x40,(byte)0x43,(byte)0x00,(byte)0x7d,(byte)0xb6,(byte)0x5d,(byte)0x40,(byte)0x2e,(byte)0x00,(byte)0x92,(byte)0x35,(byte)0x5d,(byte)0x40,(byte)0xdc,(byte)0x00,(byte)0xb7,(byte)0x36,(byte)0x5d,(byte)0x40,(byte)0xbe,(byte)0x00,(byte)0xcb,(byte)0x31,(byte)0x5d,(byte)0x40,(byte)0x7f,(byte)0x00,(byte)0xcf,(byte)0x20,(byte)0x5d,(byte)0x80,(byte)0x81,(byte)0x00,(byte)0x37,(byte)0x62,(byte)0x5d,(byte)0x80,(byte)0x3c,(byte)0x00,(byte)0x3f,(byte)0x93,(byte)0x5d,(byte)0x80,(byte)0x4e,(byte)0x00,(byte)0x56,(byte)0x92,(byte)0x5d,(byte)0x80,(byte)0x7b,(byte)0x00,(byte)0x70,(byte)0x61,(byte)0x5d,(byte)0x80,(byte)0x9a,(byte)0x00,(byte)0x7d,(byte)0x50,(byte)0x5d,(byte)0x80,(byte)0x53,(byte)0x00,(byte)0x8a,(byte)0xdd,(byte)0x5d,(byte)0x80,(byte)0x3f,(byte)0x00,(byte)0x94,(byte)0x2e,(byte)0x5d,(byte)0x80,(byte)0xaa,(byte)0x00,(byte)0xa5,(byte)0x40,(byte)0x5d,(byte)0x80,(byte)0x2d,(byte)0x00,(byte)0xe3,(byte)0xe6,(byte)0x5d,(byte)0x80,(byte)0x7f,(byte)0x00,(byte)0xee,(byte)0x12,(byte)0x5d,(byte)0x80,(byte)0x6f,(byte)0x00,(byte)0x9d,(byte)0x5a,(byte)0x51,(byte)0x40,(byte)0x68,(byte)0x00,(byte)0xad,(byte)0x56,(byte)0x32,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xba};
    public static final byte[] JOSE_CAPTUR = {(byte)0x4d,(byte)0x52,(byte)0x00,(byte)0x20,(byte)0x32,(byte)0x30,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x7a,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xfc,(byte)0x01,(byte)0x44,(byte)0x00,(byte)0xc5,(byte)0x00,(byte)0xc5,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x51,(byte)0x17,(byte)0x40,(byte)0x4d,(byte)0x00,(byte)0x2c,(byte)0x13,(byte)0x5d,(byte)0x40,(byte)0x87,(byte)0x00,(byte)0x3c,(byte)0x64,(byte)0x5d,(byte)0x40,(byte)0xd3,(byte)0x00,(byte)0x41,(byte)0x45,(byte)0x5d,(byte)0x40,(byte)0xcc,(byte)0x00,(byte)0x98,(byte)0x30,(byte)0x5d,(byte)0x40,(byte)0x8c,(byte)0x00,(byte)0x9b,(byte)0x20,(byte)0x5d,(byte)0x40,(byte)0x50,(byte)0x00,(byte)0xeb,(byte)0x6f,(byte)0x5d,(byte)0x40,(byte)0xa0,(byte)0x01,(byte)0x0a,(byte)0x0d,(byte)0x5d,(byte)0x80,(byte)0x60,(byte)0x00,(byte)0x22,(byte)0x8e,(byte)0x5d,(byte)0x80,(byte)0xaa,(byte)0x00,(byte)0x4b,(byte)0x4e,(byte)0x5d,(byte)0x80,(byte)0x40,(byte)0x00,(byte)0x61,(byte)0x34,(byte)0x5d,(byte)0x80,(byte)0x7e,(byte)0x00,(byte)0x69,(byte)0x58,(byte)0x5d,(byte)0x80,(byte)0xb9,(byte)0x00,(byte)0x72,(byte)0x3f,(byte)0x5d,(byte)0x80,(byte)0x8c,(byte)0x00,(byte)0xba,(byte)0x11,(byte)0x5d,(byte)0x80,(byte)0x2f,(byte)0x00,(byte)0xde,(byte)0xec,(byte)0x5d,(byte)0x80,(byte)0x21,(byte)0x00,(byte)0xfc,(byte)0xec,(byte)0x44,(byte)0x40,(byte)0x2d,(byte)0x00,(byte)0xa8,(byte)0x55,(byte)0x57,(byte)0x40,(byte)0xb2,(byte)0x01,(byte)0x09,(byte)0x8d,(byte)0x57,(byte)0x80,(byte)0x39,(byte)0x00,(byte)0xae,(byte)0xe5,(byte)0x57,(byte)0x80,(byte)0x7c,(byte)0x00,(byte)0x7f,(byte)0x31,(byte)0x4b,(byte)0x40,(byte)0x78,(byte)0x00,(byte)0x79,(byte)0x51,(byte)0x44,(byte)0x40,(byte)0xbd,(byte)0x00,(byte)0xfa,(byte)0x17,(byte)0x44,(byte)0x80,(byte)0xb6,(byte)0x00,(byte)0xf7,(byte)0x8d,(byte)0x44,(byte)0x80,(byte)0x68,(byte)0x00,(byte)0x55,(byte)0xda,(byte)0x3e,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xef};
    private OutputStream out;
    private InputStream in;
    private BufferedInputStream br;

    public static void main(String[] args) throws IOException, InterruptedException {

        String serverURL;
        if ((args != null) && (args.length > 0)) {
            serverURL = args[0];
        } else {
            String[] searchArgs = null;
            // Connect to OBEXPutServer from examples
            // searchArgs = new String[] { "11111111111111111111111111111123" };
            ServicesSearch.main(searchArgs);
            if (ServicesSearch.serviceFound.size() == 0) {
                System.out.println("OBEX service not found");
                return;
            }
            // Select the first service found
            serverURL = (String)ServicesSearch.serviceFound.elementAt(0);
        }

        System.out.println("Connecting to " + serverURL);

        new ObexPutClient(serverURL);
    }

    public ObexPutClient(String serverURL) throws IOException {
        StreamConnection clientSession = (StreamConnection)Connector.open(serverURL);
        byte[] buf = new byte[1024];
        byte[] buff = new byte[9];
        byte[] buffer = new byte[512];
        out = clientSession.openOutputStream();
        in = clientSession.openInputStream();
        br = new BufferedInputStream(in);
/*
        sendCommand((byte)0x08, null, 0); // capture to host

        br.read(buff, 0, 9 );
        int size=(byte)(buff[5])+((buff[6]<<8)&0xFF00)-1;
        br.read(buffer, 0, size );
        for (int i = 0; i < buffer.length;i++ ) {
            System.out.print( String.format("(byte)0x%02x,", (byte)buffer[i]) ); 
        }
        int available = br.available();
        //System.out.println("Skiping " + available + "  ");
        br.skip( available );
        */

        //System.arraycopy( JOSE_ENROLL, 0, buf, 0, JOSE_ENROLL.length ); // From DB
        //System.arraycopy( JOSE_CAPTUR, 0, buf, JOSE_ENROLL.length, JOSE_CAPTUR.length ); // From Device

        memcpy(buf,0,JOSE_ENROLL,0,512);
        memcpy(buf,512,JOSE_CAPTUR,0,512);

        sendCommand((byte)0x09,buf,1024);

        byte[] bufferResp = new byte[12];        
        br.read(bufferResp, 0, 10 );
        int score=(byte)(bufferResp[8])+((bufferResp[9]<<8)&0xF0);
        if(bufferResp[7]==1)
            System.out.print("Match Succeed:"+String.valueOf(score));
        else
            System.out.print("Match Fail");
            
        br.skip( br.available() );


        clientSession.close();
    }

    private void sendCommand(byte cmdid,byte[] data,int size) throws IOException {

        int sendsize=9+size;
        byte[] sendbuf = new byte[sendsize];
        sendbuf[0]='F';
        sendbuf[1]='T';
        sendbuf[2]=0;
        sendbuf[3]=0;
        sendbuf[4]=cmdid;
        sendbuf[5]=(byte)(size);
        sendbuf[6]=(byte)(size>>8);
        if(size>0) {
            for(int i=0;i<size;i++) {
                sendbuf[7+i]=data[i];
            }
        }
        int sum=calcCheckSum(sendbuf,(7+size));
        sendbuf[7+size]=(byte)(sum);
        sendbuf[8+size]=(byte)(sum>>8);


        out.write( sendbuf );
        out.flush();

        
    }

    private void memcpy(byte[] dstbuf,int dstoffset,byte[] srcbuf,int srcoffset,int size) {
		for(int i=0;i<size;i++) {
            try {
			    dstbuf[dstoffset+i]=srcbuf[srcoffset+i];
            } catch (NullPointerException e) {
            }
		}
        return;
	}

    private int calcCheckSum(byte[] buffer,int size) {
		int sum=0;
		for(int i=0;i<size;i++) {
			sum=sum+buffer[i];
		}
		return (sum & 0x00ff);
	}
}